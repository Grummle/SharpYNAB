<#@ template language="c#" hostspecific="true"  #>
<#@ assembly name="Newtonsoft.Json.dll" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
using System;
using Newtonsoft.Json;
using SharpnYNAB.Schema.Types;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;


// ReSharper disable InconsistentNaming

<#+ public void Generate() {
var filepath = Host.ResolvePath("Schema.json");
var data = JsonConvert.DeserializeObject<ClassGroup>(File.ReadAllText(filepath));
var nmspace = data.NameSpace;
#>namespace SharpnYNAB.Schema.<#=nmspace#>
{
<#+
foreach (var keyvalue in data.Properties){
var classname = keyvalue.Key;
var properties = keyvalue.Value;
#>
    public class <#= classname #> : Entity
    {
<#+ foreach (var property in properties.OrderBy(prop=>prop.Name[0]).Reverse()){ 
var fieldname = FieldName(property);
#><#+ if (property.JsonIgnore){#>

        [JsonIgnore]
<#+}#><#+ if (property.ForeignKey !=null){#>
        [ForeignKey(<#= property.ForeignKey #>)]
<#+}#>
        public <#= property.Type #> <#= property.Name #> { get => <#=fieldname#> ; set{ <#=fieldname#> = value;OnPropertyChanged();} } 
<#+}#>


<#+ foreach (var property in properties){ 
var fieldname = FieldName(property);
#>
        private <#= property.Type #> <#=fieldname#> <#+ if (property.Default!=null){#> = <#= property.Default #><#+}#>;
<#+}#>
    }
<#+}#>
}
<#+} 
public class ClassGroup{
    public string NameSpace {get;set;}
    public Dictionary<string,List<Property>> Properties {get;set;}
}
public string FieldName(Property property){
    return "_"+property.Name.ToLower().Replace("_","").Replace("@","");
}
public class Property{
    public bool JsonIgnore {get;set;} = false;
    public string Type {get;set;}
    public string Name {get;set;}
    public string Default {get;set;}
    public string ForeignKey {get;set;}
}
#>