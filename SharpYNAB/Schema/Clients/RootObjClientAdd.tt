<#@ import namespace="System.Collections.Generic" #>
using System.Linq;

namespace SharpYNAB.Schema.Clients
{
<# 
var objects = new Dictionary<string,List<string[]>>{
["Budget"]=new List<string[]>{
        new []{"Transactions","Transaction"},
        new []{"MasterCategories","MasterCategory"},
        new []{"Settings","Setting"},
        new []{"MonthlyBudgetCalculations","MonthlyBudgetCalculation"},
        new []{"AccountMappings","AccountMapping"},
        new []{"Subtransactions","Subtransaction"},
        new []{"ScheduledSubtransactions","ScheduledSubtransaction"},
        new []{"MonthlyBudgets","MonthlyBudget"},
        new []{"Subcategories","Subcategory"},
        new []{"PayeeLocations","PayeeLocation"},
        new []{"AccountCalculations","AccountCalculation"},
        new []{"MonthlyAccountCalculations","MonthlyAccountCalculation"},
        new []{"MonthlySubcategoryBudgetCalculations","MonthlySubcategoryBudgetCalculation"},
        new []{"ScheduledTransactions","ScheduledTransaction"},
        new []{"Payees","Payee"},
        new []{"MonthlySubcategoryBudgets","MonthlySubcategoryBudget"},
        new []{"PayeeRenameConditions","PayeeRenameCondition"},
        new []{"Accounts","Account"}
        },
["Catalog"]=new List<string[]>{
        new []{"UserBudgets","UserBudget"},
        new []{"UserSettings","UserSetting"},
        new []{"BudgetVersions","BudgetVersion"},
        new []{"Users","User"},
        new []{"Budgets","CatalogBudget"}
        }
};


foreach (var kv in objects){ 
var root = kv.Key;
var data = kv.Value;
#>
    public partial class <#=root#>Client{
        public new void ResetChanged()
        {
            base.ResetChanged();
<# foreach (var row in data){#>
            ResetChanged(Changed.<#=row[0]#>, Obj.<#=row[0]#>);
<# }#>
        }

        public override void UpdateFromChangedEntities(Roots.<#=root#> changedEntities)
        {
<# foreach (var row in data){#>
            foreach (var obj in changedEntities.<#=row[0]#>)
            {
                var currentObj = Obj.<#=row[0]#>.FirstOrDefault(o=>o.Id == obj.Id);
                if (currentObj != null){
                    if (obj.IsTombstone){
                        Obj.<#=row[0]#>.Remove(currentObj);
                    }
                }else{
                    Obj.<#=row[0]#>.Add(obj);
                }
            }
<# }#>
        }
    }
<# }#>
}
<#+
public struct Element{
    public string RootName {get;set;}
}

#>